Conversation about response types: https://hasurahq.slack.com/archives/C07GVB485RD/p1723841320559989?thread_ts=1723838909.100429&cid=C07GVB485RD

Example 1 (normal streaming)

$ curl -X POST "http://localhost:5000/threads" -H "Content-Type: application/json" -d '{"message": "Who are my top customers"}'

event: start
data: {"thread_id": "30a9cd4d-2c16-411f-b5f5-25e9a688952d"}

event: assistant_response_message
data: {"text": "To find out who your top customers are, we'll need to analyze the payment data and customer information. Let's retrieve this information and process it to identify the customers who have spent the most. I'll use the \"execute_python\" tool to fetch and analyze this data.", "tool_calls": [{"name": "execute_python", "call_id": "toolu_01KDZo2A9GxTBo4t4w6Dpb4z", "input": {"python_code": "# First, let's get the payment data\nsql_payments = \"\"\"\nSELECT customerId, SUM(amount) as total_spent\nFROM (\n    SELECT customerId, amount FROM PaymentP202201\n    UNION ALL SELECT customerId, amount FROM PaymentP202202\n    UNION ALL SELECT customerId, amount FROM PaymentP202203\n    UNION ALL SELECT customerId, amount FROM PaymentP202204\n    UNION ALL SELECT customerId, amount FROM PaymentP202205\n    UNION ALL SELECT customerId, amount FROM PaymentP202206\n    UNION ALL SELECT customerId, amount FROM PaymentP202207\n)\nGROUP BY customerId\nORDER BY total_spent DESC\nLIMIT 10\n\"\"\"\n\ntop_customers = executor.run_sql(sql_payments)\n\n# Now, let's get the customer details for these top customers\ncustomer_ids = [str(customer['customerId']) for customer in top_customers]\ncustomer_ids_str = ','.join(customer_ids)\n\nsql_customer_details = f\"\"\"\nSELECT id, givenName, surname, emailAddr\nFROM Patron\nWHERE id IN ({customer_ids_str})\n\"\"\"\n\ncustomer_details = executor.run_sql(sql_customer_details)\n\n# Combine the payment data with customer details\ntop_customers_with_details = []\nfor payment in top_customers:\n    customer = next((c for c in customer_details if c['id'] == payment['customerId']), None)\n    if customer:\n        top_customers_with_details.append({\n            'Customer ID': customer['id'],\n            'Name': f\"{customer['givenName']} {customer['surname']}\",\n            'Email': customer['emailAddr'],\n            'Total Spent': f\"${payment['total_spent']:.2f}\"\n        })\n\n# Store the result as an artifact\nexecutor.store_artifact('top_customers', 'Top 10 Customers by Total Spending', 'table', top_customers_with_details)\n\n# Print some summary information\nexecutor.print(f\"Total number of top customers retrieved: {len(top_customers_with_details)}\")\nexecutor.print(f\"Highest amount spent: ${top_customers_with_details[0]['Total Spent']}\")\nexecutor.print(f\"Lowest amount spent in top 10: ${top_customers_with_details[-1]['Total Spent']}\")"}}]}

event: tool_response_message
data: {"call_id": "toolu_01KDZo2A9GxTBo4t4w6Dpb4z", "output": {"output": "SQL statement returned 10 rows, columns: ['customerId', 'total_spent']\nSQL statement returned 10 rows, columns: ['id', 'givenName', 'surname', 'emailAddr']\nStored table artifact: identifier = 'top_customers', title = 'Top 10 Customers by Total Spending', number of rows = 10, sample rows = [{'Customer ID': 526, 'Name': 'KARL SEAL', 'Email': 'KARL.SEAL@sakilacustomer.org', 'Total Spent': '$221.55'}, {'Customer ID': 148, 'Name': 'ELEANOR HUNT', 'Email': 'ELEANOR.HUNT@sakilacustomer.org', 'Total Spent': '$216.54'}]\nTotal number of top customers retrieved: 10\nHighest amount spent: $$221.55\nLowest amount spent in top 10: $$174.66\n", "error": null, "sql_statements": [{"sql": "\nSELECT customerId, SUM(amount) as total_spent\nFROM (\n    SELECT customerId, amount FROM PaymentP202201\n    UNION ALL SELECT customerId, amount FROM PaymentP202202\n    UNION ALL SELECT customerId, amount FROM PaymentP202203\n    UNION ALL SELECT customerId, amount FROM PaymentP202204\n    UNION ALL SELECT customerId, amount FROM PaymentP202205\n    UNION ALL SELECT customerId, amount FROM PaymentP202206\n    UNION ALL SELECT customerId, amount FROM PaymentP202207\n)\nGROUP BY customerId\nORDER BY total_spent DESC\nLIMIT 10\n", "result": [{"customerId": 526, "total_spent": 221.55}, {"customerId": 148, "total_spent": 216.54000000000002}, {"customerId": 144, "total_spent": 195.58}, {"customerId": 137, "total_spent": 194.61}, {"customerId": 178, "total_spent": 194.61}, {"customerId": 459, "total_spent": 186.62}, {"customerId": 469, "total_spent": 177.60000000000005}, {"customerId": 468, "total_spent": 175.61}, {"customerId": 236, "total_spent": 175.58}, {"customerId": 181, "total_spent": 174.66000000000003}]}, {"sql": "\nSELECT id, givenName, surname, emailAddr\nFROM Patron\nWHERE id IN (526,148,144,137,178,459,469,468,236,181)\n", "result": [{"id": 137, "givenName": "RHONDA", "surname": "KENNEDY", "emailAddr": "RHONDA.KENNEDY@sakilacustomer.org"}, {"id": 144, "givenName": "CLARA", "surname": "SHAW", "emailAddr": "CLARA.SHAW@sakilacustomer.org"}, {"id": 148, "givenName": "ELEANOR", "surname": "HUNT", "emailAddr": "ELEANOR.HUNT@sakilacustomer.org"}, {"id": 178, "givenName": "MARION", "surname": "SNYDER", "emailAddr": "MARION.SNYDER@sakilacustomer.org"}, {"id": 181, "givenName": "ANA", "surname": "BRADLEY", "emailAddr": "ANA.BRADLEY@sakilacustomer.org"}, {"id": 236, "givenName": "MARCIA", "surname": "DEAN", "emailAddr": "MARCIA.DEAN@sakilacustomer.org"}, {"id": 459, "givenName": "TOMMY", "surname": "COLLAZO", "emailAddr": "TOMMY.COLLAZO@sakilacustomer.org"}, {"id": 468, "givenName": "TIM", "surname": "CARY", "emailAddr": "TIM.CARY@sakilacustomer.org"}, {"id": 469, "givenName": "WESLEY", "surname": "BULL", "emailAddr": "WESLEY.BULL@sakilacustomer.org"}, {"id": 526, "givenName": "KARL", "surname": "SEAL", "emailAddr": "KARL.SEAL@sakilacustomer.org"}]}], "modified_artifacts": [{"identifier": "top_customers", "title": "Top 10 Customers by Total Spending", "artifact_type": "table", "data": [{"Customer ID": 526, "Name": "KARL SEAL", "Email": "KARL.SEAL@sakilacustomer.org", "Total Spent": "$221.55"}, {"Customer ID": 148, "Name": "ELEANOR HUNT", "Email": "ELEANOR.HUNT@sakilacustomer.org", "Total Spent": "$216.54"}, {"Customer ID": 144, "Name": "CLARA SHAW", "Email": "CLARA.SHAW@sakilacustomer.org", "Total Spent": "$195.58"}, {"Customer ID": 137, "Name": "RHONDA KENNEDY", "Email": "RHONDA.KENNEDY@sakilacustomer.org", "Total Spent": "$194.61"}, {"Customer ID": 178, "Name": "MARION SNYDER", "Email": "MARION.SNYDER@sakilacustomer.org", "Total Spent": "$194.61"}, {"Customer ID": 459, "Name": "TOMMY COLLAZO", "Email": "TOMMY.COLLAZO@sakilacustomer.org", "Total Spent": "$186.62"}, {"Customer ID": 469, "Name": "WESLEY BULL", "Email": "WESLEY.BULL@sakilacustomer.org", "Total Spent": "$177.60"}, {"Customer ID": 468, "Name": "TIM CARY", "Email": "TIM.CARY@sakilacustomer.org", "Total Spent": "$175.61"}, {"Customer ID": 236, "Name": "MARCIA DEAN", "Email": "MARCIA.DEAN@sakilacustomer.org", "Total Spent": "$175.58"}, {"Customer ID": 181, "Name": "ANA BRADLEY", "Email": "ANA.BRADLEY@sakilacustomer.org", "Total Spent": "$174.66"}]}]}}

event: assistant_response_message
data: {"text": "Based on the analysis of the payment data, I've identified the top 10 customers by their total spending. Here's a summary of the findings:\n\n1. We've successfully retrieved and processed data for the top 10 customers.\n2. The highest amount spent by a single customer is $221.55.\n3. The lowest amount spent among the top 10 customers is $174.66.\n\nHere's the detailed list of your top customers:\n\n<artifact identifier='top_customers' warning='I cannot see the full data so I must not make up observations' />\n\nThese customers represent your most valuable patrons based on their total spending. They have consistently made significant purchases or rentals, contributing substantially to your business revenue.\n\nSome observations and recommendations:\n\n1. Customer Retention: These top customers are crucial for your business. Consider implementing a VIP program or special perks to maintain their loyalty and encourage continued patronage.\n\n2. Personalized Marketing: Use the email addresses provided to send personalized offers or early access to new releases, tailored to their preferences based on their rental history.\n\n3. Feedback Collection: Reach out to these top customers for feedback on your services. Their insights could be valuable for improving your offerings and attracting more high-value customers.\n\n4. Analysis of Preferences: It might be worthwhile to analyze what types of movies or services these top customers prefer. This information could guide your inventory decisions and marketing strategies.\n\n5. Upselling Opportunities: Since these customers are already spending significantly, they might be open to premium services or higher-tier memberships if you offer them.\n\nRemember, while these customers are your top spenders, it's also important to nurture relationships with other customers who have the potential to become high-value patrons in the future.\n\nIs there any specific information about these top customers you'd like to know more about, such as their rental preferences or frequency of visits?", "tool_calls": []}

event: finish
data: {}


Example 2 (mutation confirmation)


$ curl -X POST "http://localhost:5000/threads" -H "Content-Type: application/json" -d '{"message": "issue a refund to abhinav@hasura.io who has owner_id f67a3d0c-38eb-43b8-8f41-1d772673708f and project_id 73a7b217-49f0-4301-8dab-b5c9b2576bbc for 20 dollars"}'

event: start
data: {"thread_id": "48b9bbef-4780-4890-9c6e-b0966042f13b"}

event: assistant_response_message
data: {"text": null, "tool_calls": [{"name": "execute_python", "call_id": "call_2i3Ws2jlHSEUruCYlQli9hsQ", "input": {"python_code": "refund_data = await executor.run_sql(\"SELECT * FROM app.IssueCredits(STRUCT(20 as amount, 'abhinav@hasura.io' as email, 'f67a3d0c-38eb-43b8-8f41-1d772673708f' as ownerId, '73a7b217-49f0-4301-8dab-b5c9b2576bbc' as projectId))\")\nexecutor.store_artifact('refund_result', 'Refund Result', 'table', refund_data)"}}]}

event: tool_response_message
data: {"call_id": "call_2i3Ws2jlHSEUruCYlQli9hsQ", "output": {"output": "", "error": "Traceback (most recent call last):\n  File \"<string>\", line 2, in async_exec_code\n  File \"/Users/abhg/hasura/pacha-ai/pacha/data_engine/python_executor.py\", line 49, in run_sql\n    try:\n         \n  File \"/Users/abhg/hasura/pacha-ai/pacha/data_engine/ddn.py\", line 189, in execute_sql\n    raise DdnDataEngineException(error)\npacha.data_engine.ddn.DdnDataEngineException: error in data fusion: Error during planning: table function 'app' not found\n", "sql_statements": [], "modified_artifacts": []}}

event: assistant_response_message
data: {"text": "It seems there was an error in processing the refund request due to an issue with the database function. Let me try again to ensure the refund is issued correctly.", "tool_calls": [{"name": "execute_python", "call_id": "call_FpvG36T82WvVB8gYAHSS0gqx", "input": {"python_code": "refund_data = await executor.run_sql(\"SELECT * FROM IssueCredits(STRUCT(20 as amount, 'abhinav@hasura.io' as email, 'f67a3d0c-38eb-43b8-8f41-1d772673708f' as ownerId, '73a7b217-49f0-4301-8dab-b5c9b2576bbc' as projectId))\")\nexecutor.store_artifact('refund_result', 'Refund Result', 'table', refund_data)"}}]}

event: user_confirmation
data: {"confirmation_id": "5009a10f-14b4-4191-8f4c-5438817e85d5", "message": "SELECT * FROM IssueCredits(STRUCT(20 as amount, 'abhinav@hasura.io' as email, 'f67a3d0c-38eb-43b8-8f41-1d772673708f' as ownerId, '73a7b217-49f0-4301-8dab-b5c9b2576bbc' as projectId))", "thread_id": "48b9bbef-4780-4890-9c6e-b0966042f13b"}

.... it's waiting here for user confirmation ...

When the user accepts confirmation, the following request should get fired:

$ curl -X POST "http://localhost:5000/threads/48b9bbef-4780-4890-9c6e-b0966042f13b/user_confirmation" -H "Content-Type: application/json" -d '{"confirmation_id": "5009a10f-14b4-4191-8f4c-5438817e85d5", "confirm": true}'

{}

$ ... Then the first event stream continues

event: tool_response_message
data: {"call_id": "call_FpvG36T82WvVB8gYAHSS0gqx", "output": {"output": "SQL statement returned 1 rows, columns: ['status', 'stripeInvoiceId']\nStored table artifact: identifier = 'refund_result', title = 'Refund Result', number of rows = 1, sample rows = [{'status': 'success', 'stripeInvoiceId': 'stripe_fake_invoice_id_123_987'}]\n", "error": null, "sql_statements": [{"sql": "SELECT * FROM IssueCredits(STRUCT(20 as amount, 'abhinav@hasura.io' as email, 'f67a3d0c-38eb-43b8-8f41-1d772673708f' as ownerId, '73a7b217-49f0-4301-8dab-b5c9b2576bbc' as projectId))", "result": [{"status": "success", "stripeInvoiceId": "stripe_fake_invoice_id_123_987"}]}], "modified_artifacts": [{"identifier": "refund_result", "title": "Refund Result", "artifact_type": "table", "data": [{"status": "success", "stripeInvoiceId": "stripe_fake_invoice_id_123_987"}]}]}}

event: assistant_response_message
data: {"text": "The refund has been successfully processed. Here are the details of the transaction:\n\n<artifact identifier=\"refund_result\"/>", "tool_calls": []}

event: finish
data: {}